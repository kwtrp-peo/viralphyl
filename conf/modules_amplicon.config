/*
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Config file for defining DSL2 per module options and publishing paths
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    Available keys to override module options:
        ext.args   = Additional arguments appended to command in module.
        ext.args2  = Second set of arguments appended to command in module (multi-tool modules).
        ext.args3  = Third set of arguments appended to command in module (multi-tool modules).
        ext.prefix = File name prefix for output files.
----------------------------------------------------------------------------------------
*/

//
// Optional configuration options
//

skip_samplesheet_generation {
    process {
        withName: 'GENERATE_SAMPLESHEET' {
            publishDir = [
                    path: { "${params.outdir}/" },
                    mode: params.publish_dir_mode,
                    pattern: "*.{tsv,csv}"
                ]
        }
    }
}


//
// Optional configuration options
//
if (!params.skip_assembly) {
    process {
        withName: 'ARTIC_GUPPYPLEX' {
            ext.args =
                // List of arguments with defaults if params are not set
                [
                    "--min-length ${params.min_read_length ?: 10}",
                    params.max_read_length ? "--max-length ${params.max_read_length}" : '',
                    params.min_read_quality ? "--quality ${params.min_read_quality}" : '',
                ]
                // Join list elements into a single string
                .join(' ').trim()
            // publishDir = [
            //    path: { "${params.outdir}/guppyplex" },
            //    mode: params.publish_dir_mode // override the global setting in conf/base.config
            // ]
        }

        withName: 'ARTIC_MINION' {
            ext.args =  [
                "--primer-match-threshold ${params.primer_match_threshold ?: 30}",
                "--min-depth ${params.min_depth ?: 20}",
                "--min-mapq ${params.min_mapq ?: 20}",
                "--normalise ${params.normalise ?: 100}",
                params.no_indels ? "--no-indels" : '',
                ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/assembly/depths" },
                mode: params.publish_dir_mode,
                // pattern: "*.{sorted.bam,sorted.bam.bai,fail.vcf,merged.vcf,primers.vcf,gz,tbi,consensus.fasta,depths.png,qc.report.tsv,processed.scheme.bed}"
                pattern: "*.{depths.png}"
            ]
        }

        //withName: 'COLLAPSE_PRIMER_BED' {
        //    ext.args =  [ ].join(' ').trim()
        //    publishDir = [
        //        path: { "${params.outdir}/collapsed_bed" },
        //        mode: params.publish_dir_mode,
        //        pattern: "*.{collapsed.scheme.bed}"
        //    ]
        // }

        withName: 'PLOT_MOSDEPTH_REGIONS' {
            ext.args =  [ ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/assembly" },
                mode: params.publish_dir_mode,
                pattern: "*{heatmap.pdf,heatmap.png}"
            ]
        }

        withName: 'GET_ASSEMBLY_STATS' {
            ext.args =  [ ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/assembly" },
                mode: params.publish_dir_mode,
                // pattern: "*.{tsv,png}"
                pattern: "*.{png}"
            ]
        }

        //withName: 'GET_GENOTYPES' {
        //    ext.args =  [ ].join(' ').trim()
        //    publishDir = [
        //        path: { "${params.outdir}/genotypes" },
        //        mode: params.publish_dir_mode,
        //        pattern: "*.{tsv}"
        //    ]
        //}

        //withName: 'AGGREGATE_ASSEMBLY_TSVS' {
        //    ext.args =  [ ].join(' ').trim()
        //    publishDir = [
        //        path: { "${params.outdir}/aggregated_metadata" },
        //        mode: params.publish_dir_mode,
        //        pattern: "*.{tsv}"
        //    ]
        //}

        withName: 'FASTA_META_FILTER' {
            ext.args =  [ 
                "--threshold ${params.sequence_threshold ?: 0.7}",
            ].join(' ').trim()
            publishDir = [
                path: { "${params.outdir}/assembly" },
                mode: params.publish_dir_mode,
                pattern: "*.{tsv,fasta,png}"
            ]
        }
    }
}


//
// Optional configuration options
//
if (!params.skip_qc) {
    process {
        withName: 'TOULLIG_QC' {
            publishDir = [
                path: { "${params.outdir}/quality_check" },
                mode: params.publish_dir_mode,
                saveAs: { filename -> filename.equals('versions.yml') ? null : filename }
            ]
        }
    }
}
